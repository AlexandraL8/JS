//'number' + 3 + 3

/*var number = 2;
console.log(number+3+3);
*/

//У нас є змінна number, яку ми ініціалізували значенням 2. У консоль виводимо значення яке отримали завдяки оператору додавання.



//null + 3

/*var empty=null;
console.log (empty +3);
*/

//У нас є змінна empty, яку ми ініціалізували значенням null. Null це відсутній об'єкт, який зводиться до значення нуль. Тому 0+3=3.



//5 && "qwerty"

/*let a = 5;
//let b = "qwerty";
//let result= a && b; 
console.log(result);
*/

//Оскільки всі операнди істинноподібні, то оператор "&&" повернув значення останнього операнда.


//+'40' + +'2' + "hillel";

/*let a = '40';
let b = '2';
let c = "hillel";
let result = +a + +b + c;
console.log(result);
*/

//Унарний "+" приводить значення до numner та має приорітет над додаванням. Тому ми маємо 40+2=42, а потім шляхом конкатенації отримаємо 42hillel.


//'10' - 5 === 6;

/*let a = '10';
	let b = 5;
	let c = 6;
	let result = a - b === c; 
console.log(result);
*/

//Віднімання перетворює до числа, отже рядок "10" стає числом 10, потім віднімаємо 5. Оскільки 5 не дорівнює 6, то оператор строгої рівності "===" повертає False.


//true + false

/*let a = true;
	let b = false;
	let c = a+b;
	console.log (c);
*/

//True перетворюється на 1, а False на 0. Тому маємо 1+0=1.


//'4px' - 3

/*let a = '4px';
	let b = 3;
	let c = a-b;
	console.log (c);
*/

//Оператор "-" вичитує лише числа, тому в результаті отримаємо NaN.




//'4' - 3

/*let a = '4';
	let b = 3;
	let c = a-b;
console.log(c);
*/

//Віднімання перетворює до числа, отже рядок "4" стає числом 4, потім віднімаємо 3, отримаємо 1.


//'6' + 3 ** 0;

/*let a = '6';
	let b = 3;
	let c = 0;
	result = a+b**c;
	console.log(result);
	console.log(typeof result);
*/

//Зведення будь-якого числа в нульовий ступінь призводить до 1. Додавання з рядком перетворює число 1 на рядок і додає до рядка 6. В результаті маэмо рядок '61'.



//12 / '6'

/*let a = 12;
	let b = '6';
	result = a/b;
	console.log(result);
*/

//Оператор поділу приводить рядок '6' до числа 6. В результаті маємо 12/6=2.


//'10' + (5 === 6);

/*let a = '10';
	let b = 5;
	let c = 6;
	result = a+(b === c);
	console.log(result);
*/

//Оскільки 5 не дорівнює 6, то оператор суворої рівності буде False. При додаванні якщо в одного операнда рядок, то в результаті буде рядок. Тому в результаті маємо 10false.


//null == ''

/*let a = null;
	let b = '';
	result = a==b;
	console.log(result);
*/

//При нестрогому порівнянні, значення null може дорівнювати тільки undefined. Тому отримуємо False.


//3 ** (9 / 3);

/*let a = 3;
	let b = 9;
	let c = 3;
	result = a ** (b / c);
	console.log(result);
*/

// Групування () має вищий приорітет ніж ступінь. Тому спочатку 9/3=3, а потім 3 зводимо в 3 ступінь.


//!!'false' == !!'true'

/*let a = 'false';
	let b = 'true';
	result = !!a == !!b;
	console.log(result);
*/

//Перше НЕ перетворює значення на логічне значення і повертає зворотне, а друге НЕ знову інвертує його. Наприкінці ми маємо просте перетворення значення на логічне. Наші змінні string є True, тому True == True.


//0 || '0' && 1

/*let a = 0;
	let b = '0';
	let c = 1;
	result = a || b && c;
	console.log(result);
*/

//Пріоритет оператора && більше, ніж||, тому він виконується раніше.
//Оператор && перетворює кожен операнд на логічне значення ('0'-true, 1-true). Усі операнди дійсні, тому повертає значення останнього (1).
//Оператор || перетворює кожен операнд на логічне значення (0-false, 1-true). Оператор повертає перше справжнє значення чи останнє, якщо таке значення не знайдено (повернув значення 1).


//(+null == false) < 1;

/*let a = +null;
	let b = false;
	let c = 1;
	result =(a == b) < c  ;
	console.log(result);
*/

//Операнди різних типів перетворюються оператором == до числа. У результаті, +null, і false стають нулем, отримуємо true. Оскільки True=1, він може бути <1. Результат False.


//false && true || true

    /*
	let a = false;
	let b = true;
	result =a && b || b
	console.log(result);
	*/
	
	
//Пріоритет оператора && більше, ніж||, тому він виконується раніше.
//Оператор && повертає перше хибне значення, а оператор || повертає перше справжнє значення, тому маємо True.


//false && (false || true);

/*let a = false;
	let b = true;
	result =a && (a || b)
	console.log(result);
*/

//Пріоритет оператора () більше, ніж &&, тому він виконується раніше.
//Оператор || повертає перше справжнє значення, а оператор && повертає перше хибне значення, тому маємо False.


//(+null == false) < 1 ** 5;

/*let a = +null;
	let b = false;
	let c = 1;
	let d = 5;
	result =(a == b) < c**d ;
	console.log(result);
*/

//Операнди різних типів перетворюються оператором == до числа. У результаті, +null, і false стають нулем, отримуємо true. 
//Одиниця в п'ятому ступені дорівнює 1.
//Оскільки True=1, він може бути <1. Результат False.














	
	








	
	









	
	















